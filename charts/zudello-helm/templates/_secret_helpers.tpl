{{ define "zudello.copySecrets" -}}
{{/* 
Copy over secrets from another namespace if not already available. Called with a dict, for example:
{{ template "zudello.copySecrets" dict 
  "srcNamespace" "coreapi" 
  "srcSecret" "zudello-tls" 
  "destNamespace" .Values.namespace 
  "destSecret" "zudello-tls" }} 

srcNamespace: The namespace to copy the secret from, optional, default: "default"
srcSecret: The name of the secret to copy, required
destNamespace: The namespace to copy the secret to, required
destSecret: The name of the secrety to copy to, optional, default srcSecret
*/}}
{{ $srcNamespace := (default "default" .srcNamespace) }}
{{ $srcSecret := .srcSecret }}
{{ $destNamespace := .destNamespace }}
{{ $destSecret := (default $srcSecret .destSecret ) }}
{{- $destSecretCurrent := (lookup "v1" "Secret" $destNamespace $destSecret ) }}
{{- if not $destSecretCurrent }}
{{/* The destination is not there, Lookup the source value */}}
{{- $srcSecretVal := (lookup "v1" "Secret" $srcNamespace $srcSecret ) -}}
{{- if $srcSecretVal -}}
---
# Generated by zudello.copySecrets template
apiVersion: v1
kind: Secret
metadata:
  name: {{ $destSecret | quote }}
  namespace: {{ $destNamespace | quote }}
  annotations:
    "helm.sh/resource-policy": keep
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "-20"
type: {{ $srcSecretVal.type | quote }}
data:
{{- range $key, $value := $srcSecretVal.data }}
  {{ $key | quote }}: {{ $value | quote }}
{{- end }}{{/* range */}}
{{- else -}}
{{/* Allow this to proceed so not to break --dry-run */}}
{{- end -}}{{/* if $srcSecret */}}

{{- end }}{{/* if not $destSecret */}}

{{- end -}}
{{/* ======================== End zudello.copySecrets ======================== */}}


{{- define "zudello.createSecret" -}}
{{/* 
Create a secret, generating a new value if required. An example full config

{{ template "zudello.createSecret" dict 
    "namespace" .Values.namespace 
    "secretName" "my-secret"
    "valueKey" "ENV_NAME"
    "prefix" "base64:"
    "valueStyle" "base64"
    "valueLength" 32
    "additionalValues" (dict "USERNAME" "admin" "HOST" "some.host.svc.cluster.local")
}} 

namespace: The namespace in which to create the secret
secretName: The name of the secret
valueKey: The key in the generated secret, typically the name of the environment variable
prefix: A prefix to put on the secret, optional, default nothing
valueLength: The number of characters the generated password is, optional, default 32
valueStyle: The style of the secret, default plain, can be one of:
  base64: The generated secret is base64 encoded, after it is generated to valueLength long
  plain: The generated secret is plain text, just letters and numbers
  random: The generated secret is a random string of binary data, valueLength octects long
additionalValues: A dict of additional values to add to the secret, optional, default nothing

*/}}
{{ $namespace := .namespace }}
{{ $secretName:= .secretName}}
{{ $valueKey:= .valueKey }}
{{ $prefix:= (default "" .prefix) }}
{{ $valueStyle:= (default "plain" .valueStyle) }}
{{ $valueLength:= (default 32 .valueLength) }}
{{- $secretCurrent := (lookup "v1" "Secret" $namespace $secretName ) }}
{{- if not $secretCurrent }}
{{/* The destination is not there, create a new secret*/}}

---
apiVersion: v1
kind: Secret
metadata:
  name: {{ $secretName | quote }}
  namespace: {{ $namespace | quote }}
  annotations:
    "helm.sh/resource-policy": keep
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "-11"
data:
{{ if eq $valueStyle "base64" }}
  {{ $valueKey | quote }}: {{ (print $prefix ((encryptAES (randAscii 1000) (randAscii 2000)) | b64dec | trunc $valueLength | b64enc)) | b64enc | quote }}
{{- else if eq $valueStyle "plain" }}
  {{ $valueKey | quote }}: {{ (print $prefix (randAlphaNum $valueLength)) | b64enc | quote }}
{{- else if eq $valueStyle "random" }}
  {{ $valueKey | quote }}: {{ (print $prefix (encryptAES (randAscii 1000) (randAscii 2000) | b64dec | trunc $valueLength)) | b64enc | quote }}
{{- else }}
{{- fail "Unknown valueStyle: " $valueStyle }}
{{- end }}
{{ if .additionalValues }}
{{- range $key, $value := .additionalValues }}
  {{ $key | quote }}: {{ $value | b64enc | quote }}
{{- end }}
{{- end }}

{{- end -}}{{/* if $secretCurrent */}}
{{- end -}}
{{/* ======================== End zudello.createSecret ======================== */}}



{{- define "zudello.createCertificate" -}}
{{/* 
Create a certificate secret, generating a new value if required. An example full config

{{ template "zudello.createCertificate" dict 
    "namespace" .Values.namespace 
    "secretName" "my-secret"
    "subject" "my-secret"
}} 

namespace: The namespace in which to create the secret
secretName: The name of the secret
subject: optional, the subject of the certificate, defaults to the secretName

Always creates a kubernetes.io/tls type secret, with the default keys of tls.crt and tls.key

*/}}
{{ $namespace := .namespace }}
{{ $secretName:= .secretName }}
{{ $subject := .subject | default $secretName }}
{{- $secretCurrent := (lookup "v1" "Secret" $namespace $secretName ) }}
{{- if not $secretCurrent }}
{{/* The destination is not there, create a new secret*/}}

{{ $cert := genSelfSignedCert $subject nil nil 3650 }}

---
# Generated by zudello.createCertificate template
apiVersion: v1
kind: Secret
type: kubernetes.io/tls
metadata:
  name: {{ $secretName | quote }}
  namespace: {{ $namespace | quote }}
  annotations:
    "helm.sh/resource-policy": keep
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "-11"
data:
  tls.crt: {{ $cert.Cert | b64enc }}
  tls.key: {{ $cert.Key | b64enc }}

{{- end -}}{{/* if $secretCurrent */}}
{{- end -}}
{{/* ======================== End zudello.createCertificate ======================== */}}


{{ define "zudello.copyPublicCertificate" -}}
{{/* 
Copy over just the public certificate (tls.crt) from a kubernetes.io/tls type secret to a configmap
{{ template "zudello.copyPublicCertificate" dict 
  "srcNamespace" "coreapi" 
  "srcSecret" "zudello-tls" 
  "destNamespace" .Values.namespace 
  "destConfigmap" "zudello-tls-pub" 
}} 

srcNamespace: The namespace to copy the secret from, optional, default: "default"
srcSecret: The name of the secret to copy, required
destNamespace: The namespace to copy the secret to, required
destConfigmap: The name of the configMap to copy to, required
*/}}
{{ $srcNamespace := (default "default" .srcNamespace) }}
{{ $srcSecret := .srcSecret }}
{{ $destNamespace := .destNamespace }}
{{ $destConfigmap := .destConfigmap }}
{{- $destConfigmapCurrent := (lookup "v1" "ConfigMap" $destNamespace $destConfigmap ) }}
{{- if not $destConfigmapCurrent }}
{{/* The destination is not there, Lookup the source value */}}
{{- $srcSecretVal := (lookup "v1" "Secret" $srcNamespace $srcSecret ) -}}
{{- if $srcSecretVal -}}
---
# Generated by zudello.copyPublicCertificate template
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ $destConfigmap | quote }}
  namespace: {{ $destNamespace | quote }}
  annotations:
    "helm.sh/resource-policy": keep
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "-19"
data:
  tls.crt: {{ (index $srcSecretVal.data "tls.crt") | b64dec | quote }}

{{- end -}}{{/* if $srcSecretVal */}}
{{- end }}{{/* if not $destConfigmapCurrent */}}

{{- end -}}
{{/* ======================== End zudello.copyPublicCertificate ======================== */}}