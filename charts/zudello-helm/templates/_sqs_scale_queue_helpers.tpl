{{- define "zudello.scaleQueue" -}}
{{/* 
Creates an entire ScaledObject given the name of the deployment, and a list of queues
and their target length.

The preferred method to call this is in values.yaml, and passing as an argument to the
deployment, along with all values. Queue names are always prefixed with 
"%s_to" .Values.clustername

For examples, values.ymal may look like this (with comments):

queueMain:
  name: coreapi-queue   # The EXACT name of the deployment to scale
  minimumReplicas: 1    # The minimum number of replicas to keep, typically 1
  maximumReplicas: 5    # The maximum number of replicas to keep, can be overridden by cluster
  scaleDownDelay: 30    # Optional: The time in seconds to wait before scaling down, default: 60 seconds
  scaleCpu: 100         # Optional: The CPU threshold to scale up, if <= 0, no scaling will be done, default is disabled
  queues:               # A list of queues to scale, and their target length
    - name: to-api-integration    # The name of the queue to scale, automatically prefixed with <clustername>_
      length: 5000                # The target length of the queue
    - name: to-api-default
      length: 50

The template would then be called with:
{{ include "zudello.scaleQueue" (list .Values.queueMain .) }}

NOTE: The trailing "." in the list is critical as this will pass in the full context
of the deployment.

To override a specific item in a cluster, eg: maximumReplicas, in that cluster.yaml, put:

queueDefault:
  maximumReplicas: 30

Implemenation note: The choice of using config in values.yaml is deliberate, as it
makes the confiuration much easier to read and understand and allow values to be 
overridden per cluster.
*/}}
{{- $queue := (index . 0) -}}
{{- $values := (index . 1).Values -}}
{{- $scaleCpu := default 0.0 $queue.scaleCpu }}
---
# Generated by zudello.scaleQueue template
apiVersion: keda.sh/v1alpha1
kind: ScaledObject
metadata:
  name: {{ $queue.name }}
  namespace: {{ $values.namespace | quote }}
spec:
  scaleTargetRef:
    name: {{ $queue.name }}
{{- if $values.workingHours }}
  minReplicaCount: 0
{{ else }} {{/* if $values.workingHours */}}
  minReplicaCount: {{ $queue.minimumReplicas }}
{{- end }} {{/* if $values.workingHours */}}
  maxReplicaCount: {{ $queue.maximumReplicas }}
  advanced:
    horizontalPodAutoscalerConfig:  
      behavior:                  
        scaleDown:
          stabilizationWindowSeconds: {{ mul 2 (default 60 $queue.scaleDownDelay) }}
          policies:
          - type: Pods
            value: 1
            periodSeconds: {{ default 60 $queue.scaleDownDelay }}
          selectPolicy: Min
  triggers:
{{- range $queue.queues }}
    - type: aws-sqs-queue
      authenticationRef:
        name: {{ $queue.name }}
      metadata:
        queueURL: {{ printf "%s_%s" $values.clusterName .name | quote }}
        queueLength: "{{ .length }}"
        awsRegion: {{ $values.awsDefaultRegion | quote }}
{{- end }}
{{ if and (not $values.workingHours) (gt $scaleCpu 0.0) }}
    - type: cpu
      metricType: "Utilization"
      metadata:
        value: "{{ $scaleCpu }}"
{{ end }} {{/* if not $values.workingHours */}}
{{ if and $values.workingHours (gt $queue.minimumReplicas 0.0) }}
    - type: cron
      metadata:
        timezone: {{ $values.workingHours.timezone | quote }}
        start: {{ $values.workingHours.start | quote }}
        end: {{ $values.workingHours.end | quote }}
        desiredReplicas: {{ $queue.minimumReplicas | quote }}
{{ end }} {{/* if $values.workingHours */}}
--- 
# Setup for keda to access SQS queue
apiVersion: keda.sh/v1alpha1
kind: TriggerAuthentication
metadata:
  name: {{ $queue.name }}
  namespace: {{ $values.namespace | quote }}
spec:
  secretTargetRef:
    - parameter: awsAccessKeyID
      name: aws
      key: AWS_ACCESS_KEY_ID
    - parameter: awsSecretAccessKey
      name: aws
      key: AWS_SECRET_ACCESS_KEY
# End zudello.scaleQueue template
{{ end }} {{/* if $values.scaleQueue */}}
